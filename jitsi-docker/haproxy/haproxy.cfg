global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
        ssl-dh-param-file /etc/haproxy/dhparams.pem

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http


# Config for running the webapp as usual
# ____________________________________________________________
frontend http_front_secured
    	bind *:80
    	# Listen on port 443 for SSL connections
   	    bind *:443 ssl crt /etc/haproxy/certs/meet.kenyacourts.org.pem
    	capture request  header Referer len 40
    	# Redirect if HTTPS is *not* used
    	# We want to redirect based on the domain as oposed to redirecting all
    	# urls using the more popular redirect scheme.
    	# redirect scheme https code 301 if !{ ssl_fc }
    	# Note that: 301 means permanent redirect
    	redirect scheme https code 301 if { hdr(host) -i kenyacourts.org } !{ ssl_fc }
    	redirect scheme https code 301 if { hdr(host) -m reg -i ^[^\.]+\.kenyacourts\.org$ } !{ ssl_fc }
    	# ____________________________________________________________
    	# ACLs
    	# Test URI to see if its a letsencrypt request
    	acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    	# Kenyacourts
    	acl host-kenyacourts-dev-alpha hdr(host) -i alpha.kenyacourts.org
    	acl host-kenyacourts-dev-api hdr(host) -i api.kenyacourts.org
    	acl host-kenyacourts-dev-meet hdr(host) -i meet.kenyacourts.org
    	# Detect Bosh Routes
    	# acl is_bosh_path -i -m beg /http-bind
    	# ____________________________________________________________
    	# Define backends
    	use_backend letsencrypt-backend if letsencrypt-acl
    	# Kenyacourts
    	use_backend kenyacourts-alpha if host-kenyacourts-dev-alpha
    	use_backend kenyacourts-alpha-api if host-kenyacourts-dev-api
    	use_backend kenyacourts-alpha-meet if host-kenyacourts-dev-meet
    	stats uri /haproxy?stats
	# HTTP/2 backends
	#frontend grpc_frontend_secured
	#    bind *:443 ssl crt /etc/ssl/certs/haproxy proto h2
	#    default_backend nnext-grpc-api
	# LE Backend
backend letsencrypt-backend
    	server letsencrypt 127.0.0.1:8888
	#-------------------------------------------------------------------------------
	# Kenyacourts
	#-------------------------------------------------------------------------------
backend kenyacourts-alpha-api
    balance roundrobin
    server main_server localhost:4141 check
backend kenyacourts-alpha
    balance roundrobin
    server main_server_1 localhost:4041 check
backend kenyacourts-alpha-meet
    balance roundrobin
    server main_server_2 localhost:8000 check
